{
  // ACTION REQUIRED: This file was automatically added to your project, but it
  // will not take effect until additional steps are taken to enable it. See the
  // following page for additional information:
  //
  // https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/EnableConfiguration.md

  "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
  "settings": {
    "indentation": {
      // The number of columns to use for each indentation of code. Depending on the useTabs and tabSize settings, this will be filled with tabs and/or spaces.
      "indentationSize": 2,

      // The width of a hard tab character in source code. This value is used when converting between tabs and spaces.
      "tabSize": 2,

      // true to indent using hard tabs; otherwise, false to indent using spaces
      "useTabs": false
    },
    "spacingRules": {
    },
    "readabilityRules": {
    },
    "orderingRules": {
      // Specifies the traits used for ordering elements within a document, along with their precedence
      // "elementOrder": [ "static", "kind", "constant", "readonly" ], //[ "kind", "accessibility", "constant", "static", "readonly" ],

      // Specifies whether System using directives are placed before other using directives
      "systemUsingDirectivesFirst": true,

      // Specifies the desired placement of using directives
      // "usingDirectivesPlacement": "outsideNamespace",

      // Specifies is blank lines are required to separate groups of using statements
      "blankLinesBetweenUsingGroups": "require" //"allow"
    },
    "namingRules": {
      // Specifies whether common non-Hungarian notation prefixes should be allowed
      // When true, the two-letter words 'as', 'at', 'by', 'do', 'go', 'if', 'in', 'is', 'it', 'no', 'of', 'on', 'or', and 'to' are allowed to appear as prefixes for variable names.
      "allowCommonHungarianPrefixes": false, //true

      // Specifies additional prefixes which are allowed to be used in variable names. See the example below for more information.
      "allowedHungarianPrefixes": []
    },
    "maintainabilityRules": {
      // Specifies which kind of types that should be placed in separate files
      "topLevelTypes": [ "class", "interface", "struct", "enum", "delegate" ]
    },
    "layoutRules": {
      // Specifies the handling for newline characters which appear at the end of a file
      "newlineAtEndOfFile": "allow",

      // Specifies if SA1519 will allow consecutive using statements without braces
      "allowConsecutiveUsings": true
    },
    "documentationRules": {
      // Specifies the company name which should appear in copyright notices

      // Specifies the default copyright text which should appear in copyright headers

      // Specifies whether file headers should use standard StyleCop XML format, where the copyright notice is wrapped in a <copyright> element
      "xmlHeader": false,

      // Specifies replacement variables which can be referenced in the copyrightText value
      "variables": {},

      // This value can be set to add a decoration for the header comment so headers look similar to the ones generated by the StyleCop Classic ReSharper fix
      "headerDecoration": "",

      // Specifies whether interface members need to be documented. When true, all interface members require documentation, regardless of accessibility.
      "documentInterfaces": true,

      // Specifies whether exposed elements need to be documented. When true, all publicly-exposed types and members require documentation.
      "documentExposedElements": true,

      // Specifies whether internal elements need to be documented. When true, all internally-exposed types and members require documentation.
      "documentInternalElements": false,

      // Specifies whether private elements need to be documented. When true, all types and members except for declared private fields require documentation.
      "documentPrivateElements": false,

      // Specifies whether private fields need to be documented. When true, all fields require documentation, regardless of accessibility.
      "documentPrivateFields": false,

      // Specifies the culture or language to be used for certain documentation texts.
      "documentationCulture": "en-US",

      // This will determine how the SA1649 File name should match type name analyzer will check file names.
      "fileNamingConvention": "stylecop"
    }
  }
}